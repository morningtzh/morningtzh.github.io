<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brainfuck | 瑟瑟和你说早安</title>
    <link>https://blog.morningtzh.com/tags/brainfuck/</link>
      <atom:link href="https://blog.morningtzh.com/tags/brainfuck/index.xml" rel="self" type="application/rss+xml" />
    <description>Brainfuck</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><copyright>©MorningTZH</copyright><lastBuildDate>Sat, 05 Dec 2015 21:43:14 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Brainfuck</title>
      <link>https://blog.morningtzh.com/tags/brainfuck/</link>
    </image>
    
    <item>
      <title>Brainfuck解释器[on python]</title>
      <link>https://blog.morningtzh.com/post/brainfuck-interpreter/</link>
      <pubDate>Sat, 05 Dec 2015 21:43:14 +0000</pubDate>
      <guid>https://blog.morningtzh.com/post/brainfuck-interpreter/</guid>
      <description>&lt;p&gt;阿婆主脑容量不够，ぜんぜん不能在大脑中运行 &lt;strong&gt;Brainfuck&lt;/strong&gt; 程序，而且发现连运行过程都想不出来啊，
然而就这么几个字符完全可以自己写解释器嘛，并且可以打印出运行过程，而且可以试试看做成playground
的形式呢，想想还是挺有趣的。&lt;/p&gt;
&lt;p&gt;项目地址：
&lt;a href=&#34;https://code.csdn.net/u012822586/brainfuck_interpreter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code CSDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git地址：
&lt;a href=&#34;git://code.csdn.net/u012822586/brainfuck_interpreter.git&#34;&gt;Git on CSDN&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;brainfuck&#34;&gt;Brainfuck&lt;/h2&gt;
&lt;p&gt;Brainfuck是一种图灵完备的语言，他可以做到任何事情，他的编译器是世界上最小的，他共有8个操作符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Operator&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;increment the data pointer (to point to the next cell to the right).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;decrement the data pointer (to point to the next cell to the left).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;+&lt;/td&gt;
&lt;td&gt;increment (increase by one) the byte at the data pointer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td&gt;decrement (decrease by one) the byte at the data pointer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;.&lt;/td&gt;
&lt;td&gt;output the byte at the data pointer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;,&lt;/td&gt;
&lt;td&gt;accept one byte of input, storing its value in the byte at the data pointer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;/td&gt;
&lt;td&gt;if the byte at the data pointer is zero, then instead of moving the instruction pointer forward to the next command, jump it forward to the command after the matching &lt;strong&gt;]&lt;/strong&gt; command.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;]&lt;/td&gt;
&lt;td&gt;if the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it back to the command after the matching &lt;strong&gt;[&lt;/strong&gt; command.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;基本就是对内存直接操作的语言，他的『Hello World!』是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;++++++++[&amp;gt;++++[&amp;gt;++&amp;gt;+++&amp;gt;+++&amp;gt;+&amp;laquo;&amp;laquo;-]&amp;gt;+&amp;gt;+&amp;gt;-&amp;raquo;+[&amp;lt;]&amp;lt;-]&amp;raquo;.&amp;gt;&amp;mdash;.+++++++..+++.&amp;raquo;.&amp;lt;-.&amp;lt;.+++.&amp;mdash;&amp;mdash;.&amp;mdash;&amp;mdash;&amp;ndash;.&amp;raquo;+.&amp;gt;++.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;WTF!!!!!!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;需求点&#34;&gt;需求点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、基本功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释裸BF程序&lt;/li&gt;
&lt;li&gt;打印内存信息&lt;/li&gt;
&lt;li&gt;分开输出以及集体输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、调试功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置断点&lt;/li&gt;
&lt;li&gt;单步执行&lt;/li&gt;
&lt;li&gt;查看内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、playground功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做命令行模式（加参数可选）&lt;/li&gt;
&lt;li&gt;窗口分割&lt;/li&gt;
&lt;li&gt;实时解释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本功能实现&#34;&gt;基本功能实现&lt;/h2&gt;
&lt;p&gt;Brainfuck基本解释使用class BF()来实现&lt;/p&gt;
&lt;h3 id=&#34;数据部分&#34;&gt;数据部分&lt;/h3&gt;
&lt;p&gt;class BF()中数据由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brainfuck程序&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BF直接对内存进行操作，所以这边可以很简单的用list模拟出来，这样我们就有了一个无限长的内存，并用&lt;em&gt;&lt;strong&gt;BF.position&lt;/strong&gt;&lt;/em&gt;来指明正在操作的内存，相当于一个指针（实际是list index）。另外一个就是代码存储区，代码由&lt;strong&gt;string&lt;/strong&gt;类型的&lt;em&gt;&lt;strong&gt;BF.code&lt;/strong&gt;&lt;/em&gt;保存，同样有个代码指针&lt;em&gt;&lt;strong&gt;BF.codePosition&lt;/strong&gt;&lt;/em&gt;指明目前正在解释的操作符.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __init__(self):
	self.codeInit()
	self.ifRuntime = True
	
def memoryInit(self):
	self.dirty = False     # if memory have been wroten
	self.memory = [0]      # memory
	self.position = 0      # pointer to memory which byte now operating
	self.codePosition = 0  # pointer to code which operator now parsing
	self.result = &#39;&#39;       # store whole program output
	
def codeInit(self, code = None):
	if None == code:       # for object init without BF code
	    self.code = &#39;&#39;
	
	self.code = code
	self.memoryInit()

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;操作符动作&#34;&gt;操作符动作&lt;/h3&gt;
&lt;p&gt;操作符没有一点难度,按照wiki来解释。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def getChar(self):
    return self.memory[self.position]

&#39;&#39;&#39;operators&#39;&#39;&#39;
def printChar(self):
    print &amp;quot;echo: &amp;quot;,
    print chr(self.memory[self.position])    # turn to ASCII char
    self.result += chr(self.memory[self.position])  # store output
def inputChar(self):
    print &amp;quot;put in: &amp;quot;,
    self.memory[self.position] = ord(sys.stdin.read(1))
def increment(self):
    self.memory[self.position] += 1
def decrement(self):
    self.memory[self.position] -= 1
def next(self):
    self.position += 1
    if len(self.memory) &amp;lt;= self.position:
        self.memory.append(0)
def previous(self):
    self.position -= 1
    if 0 &amp;gt; self.position:
        print &#39;error: position is %d&#39;%self.position
        print printMemory()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;循环实现&#34;&gt;循环实现&lt;/h3&gt;
&lt;p&gt;循环实现比较麻烦，本来只简单地想到一对括号的情况，后面发现了多对括号的问题，就先使用&lt;strong&gt;direction&lt;/strong&gt;来保存括号在代码中的位子。并且用&lt;strong&gt;stack&lt;/strong&gt;来先记录左括号。&lt;/p&gt;
&lt;p&gt;首先在&lt;strong&gt;&lt;em&gt;loopParser()&lt;em&gt;&lt;strong&gt;中记录成对的括号位置，同时意味着循环开始结束地址也被记录了下来。在这个函数中，首先使用&lt;/strong&gt;stack&lt;/em&gt;&lt;/em&gt;来登记未配对左括号地址，并在出现右括号时，弹出一个左括号地址，与右括号地址配对，写入&lt;/strong&gt;&lt;em&gt;loopMap&lt;/em&gt;&lt;strong&gt;这个&lt;/strong&gt;direction**中，同样这个地址配对记录需要返回给主解析流程的。&lt;/p&gt;
&lt;p&gt;在主流程中，通过&lt;em&gt;&lt;strong&gt;loopParser()&lt;em&gt;&lt;strong&gt;获得&lt;/strong&gt;&lt;/em&gt;loopMap&lt;/strong&gt;&lt;/em&gt;后,就开始对整个BF代码进行解释。此时根据wiki中的操作符作用，遇到**[**时检查当前指针内容是否为0，为0则不进入循环，直接跳到对应的**]**地址上，遇到**]**时，当前指针内容不为0，则跳回到对应**[**代码地址，继续循环。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def loopParser(self, code):
    &#39;&#39;&#39;parse loop operator, recode the position of code&#39;&#39;&#39;
    loopMap = {}
    leftStack = []
    codePosition = 0
    leftNum = 0
    rightNum = 0
    for operator in code:
        if operator == &#39;[&#39;:
            leftStack.append(codePosition)
            leftNum += 1
        elif operator == &#39;]&#39;:
            leftPosition = leftStack.pop()
            rightPosition = codePosition
            loopMap[leftPosition] = rightPosition
            loopMap[rightPosition] = leftPosition
            rightNum += 1
        codePosition += 1

    if 0 != len(leftStack):
        print &amp;quot;error: there are %d &#39;[&#39; but %d &#39;]&#39;&amp;quot;
        loopMap = None

    return loopMap


def parser(self, code = None):
    &#39;&#39;&#39;parse code&#39;&#39;&#39;
    if None == code:
        code = self.code
        self.memoryInit()

    loopMap = self.loopParser(code)
    if None == loopMap:
        return

    if None == code:
        code = self.code

    while self.codePosition &amp;lt; len(code):
        operator = code[self.codePosition]
        if operator == &amp;quot;&amp;gt;&amp;quot;:
            self.next()
        elif operator == &amp;quot;&amp;lt;&amp;quot;:
            self.previous()
        elif operator == &amp;quot;+&amp;quot;:
            self.increment()
        elif operator == &amp;quot;-&amp;quot;:
            self.decrement()
        elif operator == &amp;quot;.&amp;quot;:
            self.printChar()
        elif operator == &amp;quot;,&amp;quot;:
            self.inputChar()
        elif operator == &amp;quot;[&amp;quot; and self.getChar() == 0:
            self.codePosition = loopMap[self.codePosition]
        elif operator == &amp;quot;]&amp;quot; and self.getChar() != 0:
            self.codePosition = loopMap[self.codePosition]
        self.runtime()
        self.codePosition += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打印runtime&#34;&gt;打印runtime&lt;/h3&gt;
&lt;p&gt;做这个解释器的主要原因就是，看不懂Brainfuck每一步为什么要这样做，所以解释器的重点就在于打印每一步的数据内存和代码内存，并且标出目前运行到哪里了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Global function:

	def printChar(char, point = False):
		if point:
		    char = &#39;\033[31m%s\033[0m&#39; %char  # print red chars on Unix
		
		sys.stdout.write(char + &#39; &#39;)


BF() method:

    def printData(self, data, position):
        &#39;&#39;&#39;print linear data and point the position now point&#39;&#39;&#39;
        point = False
        for nowPosition in xrange(0, len(data)):
            if nowPosition == position:
                point = True

            printChar(str(data[nowPosition]), point)
            point = False
        print &amp;quot;&amp;quot;                 # printChar don&#39;t print &#39;\n&#39;

    def runtime(self):
        &#39;&#39;&#39;print runtime memory and code&#39;&#39;&#39;
        if self.ifRuntime:
            self.printData(self.code, self.codePosition)
            self.printData(self.memory, self.position)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;基本功能运行结果&#34;&gt;基本功能运行结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://7xrczi.com1.z0.glb.clouddn.com/image/BFinterpreter/brainfuck_interpreter.jpg.tiff&#34; alt=&#34;BFinterpreter运行结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;未完待续。。。或者。。。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
